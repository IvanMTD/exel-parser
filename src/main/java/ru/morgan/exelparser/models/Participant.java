package ru.morgan.exelparser.models;

/*
create table if not exists participant(
    id int GENERATED BY DEFAULT AS IDENTITY,
    name text not null,
    middle_name text,
    lastname text not null,
    birthday date not null,
    subject_ids integer[],
    qualification_ids integer[]
);
 */

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Data;
import lombok.RequiredArgsConstructor;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Set;

@Data
@Entity
@RequiredArgsConstructor
public class Participant {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    private String middleName;
    private String lastname;
    private LocalDate birthday;
    private Set<Integer> sportSchoolIds = new HashSet<>();
    private Set<Integer> qualificationIds = new HashSet<>();

    public void addSportSchool(SportSchool sportSchool){
        if(sportSchoolIds == null){
            sportSchoolIds = new HashSet<>();
        }
        sportSchoolIds.add(sportSchool.getId());
    }

    public void addSportSchoolId(int sportSchoolId){
        if(sportSchoolIds == null){
            sportSchoolIds = new HashSet<>();
        }
        sportSchoolIds.add(sportSchoolId);
    }

    public void addQualificationId(int qualificationId){
        if (qualificationIds == null){
            qualificationIds = new HashSet<>();
        }
        qualificationIds.add(qualificationId);
    }

    public String getDate(){
        return DateTimeFormatter.ofPattern("dd.MM.yyyy").format(birthday);
    }

    public int getAge(){
        return LocalDate.now().getYear() - birthday.getYear();
    }

    public void addQualification(Qualification qualification) {
        qualificationIds.add(qualification.getId());
    }

    public String getFullName(){
        return lastname + " " + name + " " + middleName;
    }
}
